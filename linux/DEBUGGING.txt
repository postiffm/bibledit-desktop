This is a description of how to debug bibledit-gtk on Linux.
It assumes you have already gone through the BUILDING process
and the INSTALLING process.
Written by Matt Postiff, postiffm@umich.edu, 8/25/2016

Debugging with Nemiver, the Gnome+GDB Debugger
----------------------------------------------------------------
1. Preparation
   sudo apt install nemiver
2. 

Call Tree Debugging
----------------------------------------------------------------
You can link against ptrace.c and use etrace.pl, both available
at https://github.com/elcritch/etrace or at http://ndevilla.free.fr/etrace/

You also have to add -finstrument-functions to the g++ flags
in the Makefile.

This will print out a hierarchical list of the functions that
are called by the program. It is a huge amount of data.

Memory Debugging
----------------------------------------------------------------
1. To use AddressSanitizer, 
add to your Makefile g++ command -fsanitize=address -fno-omit-frame-pointer

This tool runs fairly fast, about 2x slowdown.

Run-time behavior is controlled by the ASAN_OPTIONS environment variable.

Details are at
https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags

It has to link with -lasan (libasan) and this is apparently not available on Windows.

Then run the program like this:

ASAN_OPTIONS="symbolize=1 log_path=/tmp/bibledit/asan.log" ASAN_SYMBOLIZER_PATH=$(shell which llvm-symbolizer-3.8) /usr/bin/bibledit-gtk

Use ASAN_OPTIONS=help=1 to get a list of current options.

This does run noticeably slower. The confusing thing is that the output does not show up as it does
for the given test case. I think that is because we redirect stdout...

2. To use Valgrind
valgrind --leak-check=full -v --track-origins=yes /usr/bin/bibledit-gtk >& memory.txt

It runs very slowly, but it gives good information on memory leaks
and things like conditional jumps that rely on uninitialized memory.
These are often in library code (several happen in 
/usr/lib/i386-linux-gnu/libjavascriptcoregtk-1.0.so.0.16.18
and I can't do anything about that...)

3. For memory debugging in Glib, it may be helpful to set the environment variables
G_DEBUG=gc-friendly
and 
G_SLICE=always-malloc
as these affect how glib allocates memory.

